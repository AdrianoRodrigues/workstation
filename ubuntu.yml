---
- name: Preparing My Workstation
  hosts: localhost
  connection: local
  tasks:
    - name: Installing Linux Apps
      tags: apps
      become: true
      ansible.builtin.apt:
        name: '{{ item }}'
        install_recommends: true
        state: present
      loop:
        - vim
        - htop
        - curl
        - wget
        - ncdu
        - tree
        - apt-transport-https
        - ca-certificates
        - software-properties-common
        - gnupg
        - python3-pip
        - make
        - git
        - bash-completion
        - gnupg-agent
        - zsh
        - flameshot
        - fonts-hack
        - fonts-jetbrains-mono
        - tilix
        - locate
        - jq
        - mtr
        - socat
        - nmap
        - qemu-kvm
        - virt-manager
        - guestfs-tools
        - flatpak
        - lsb-release
        - gnome-shell-extension-manager
        - build-essential
        - libssl-dev
        - zlib1g-dev
        - libbz2-dev
        - libreadline-dev
        - libsqlite3-dev
        - llvm
        - libncursesw5-dev
        - xz-utils
        - tk-dev
        - libxml2-dev
        - libxmlsec1-dev
        - libffi-dev
        - liblzma-dev
        - gnome-tweaks

    - name: Adding existing user to group libvirt
      become: true
      ansible.builtin.user:
        name: '{{ ansible_user_id }}'
        groups: libvirt
        append: true

    - name: Installing Flatpaks
      tags: flatpak
      block:
        - name: Add the flathub flatpak repository remote to the user installation
          community.general.flatpak_remote:
            name: flathub
            state: present
            flatpakrepo_url: https://flathub.org/repo/flathub.flatpakrepo
            method: user

        - name: Install flatpaks
          community.general.flatpak:
            name: '{{ item }}'
            state: present
            method: user
          loop:
            - 'org.videolan.VLC'
            - 'org.remmina.Remmina'
            - 'com.github.tchx84.Flatseal'
            - 'com.microsoft.Teams'
            - 'io.podman_desktop.PodmanDesktop'
            - 'org.keepassxc.KeePassXC'
            - 'rest.insomnia.Insomnia'

    - name: Installing Sublime Text
      tags: sublime
      block:
        - name: Install Sublime Text Key
          become: true
          ansible.builtin.apt_key:
            url: 'https://download.sublimetext.com/sublimehq-pub.gpg'
            state: present
            keyring: /etc/apt/trusted.gpg.d/sublimehq-pub.gpg

        - name: Install Sublime Text Repository
          become: true
          ansible.builtin.apt_repository:
            repo: 'deb https://download.sublimetext.com/ apt/stable/'
            state: present
            filename: sublime-text

        - name: Install Sublime Text
          become: true
          ansible.builtin.apt:
            name: sublime-text

    - name: Installing VS Code
      tags: code
      block:
        - name: Install Microsoft Key
          become: true
          ansible.builtin.apt_key:
            url: 'https://packages.microsoft.com/keys/microsoft.asc'
            state: present
            keyring: /etc/apt/trusted.gpg.d/microsoft.gpg

        - name: Install VSCode Repository
          become: true
          ansible.builtin.apt_repository:
            repo: 'deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main'
            state: present
            filename: vscode

        - name: Install Visual Studio Code
          become: true
          ansible.builtin.apt:
            name: code

    - name: Installing Oh-My-Zsh
      tags: ohmyzsh
      block:
        - name: Verify if Oh-My-Zsh is installed
          ansible.builtin.stat:
            path: '{{ ansible_env.HOME }}/.oh-my-zsh'
          register: ohmyzsh

        - name: Downloading Oh-My-Zsh installer script
          ansible.builtin.get_url:
            url: https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh
            dest: /tmp/omz-installer.sh
            mode: '0644'
          when: ohmyzsh.stat.isdir is not defined

        - name: Run Oh-My-zsh installer script
          ansible.builtin.script: /tmp/omz-installer.sh
          args:
            creates: '{{ ansible_env.HOME }}/.oh-my-zsh'
            executable: /bin/bash
          when: ohmyzsh.stat.isdir is not defined

        - name: Changing Default Shell to ZSH
          become: true
          ansible.builtin.user:
            name: '{{ ansible_user_id }}'
            shell: /bin/zsh

        - name: Changing Default ZSH Theme to Agnoster
          ansible.builtin.lineinfile:
            path: '{{ ansible_env.HOME }}/.zshrc'
            regexp: '^ZSH_THEME='
            line: 'ZSH_THEME="agnoster"'

        - name: Creating ZSH Completion folder
          ansible.builtin.file:
            path: '{{ ansible_env.HOME }}/.oh-my-zsh/completions'
            state: directory
            mode: '0755'

        - name: Adding autoload to compinit
          ansible.builtin.lineinfile:
            path: '{{ ansible_env.HOME }}/.zshrc'
            line: 'autoload -U compinit && compinit'
            state: present

        - name: Verify if Zinit is already installed
          ansible.builtin.stat:
            path: '{{ ansible_env.HOME }}/.local/share/zinit'
          register: zinit

        - name: Downloading Zinit ZSH plugin manager
          ansible.builtin.get_url:
            url: 'https://raw.githubusercontent.com/zdharma-continuum/zinit/HEAD/scripts/install.sh'
            dest: /tmp/zinit-installer.sh
            mode: '0644'
          when: zinit.stat.isdir is not defined

        - name: Run Zinit installer
          ansible.builtin.script: /tmp/zinit-installer.sh
          args:
            creates: '{{ ansible_env.HOME }}/.local/share/zinit'
            executable: /bin/bash
          when: zinit.stat.isdir is not defined

        - name: Adding Zinit plugins
          ansible.builtin.blockinfile:
            path: '{{ ansible_env.HOME }}/.zshrc'
            marker: "# {mark} ANSIBLE MANAGED BLOCK FOR ZINIT PLUGINS"
            block: |
              zinit light zsh-users/zsh-syntax-highlighting
              zinit light zsh-users/zsh-autosuggestions
              zinit light zsh-users/zsh-completions

        - name: Verify if Starship exists
          ansible.builtin.stat:
            path: /usr/local/bin/starship
          register: starship

        - name: Downloading Starship installer
          ansible.builtin.get_url:
            url: https://starship.rs/install.sh
            dest: /tmp/starship-installer.sh
            mode: '0644'
          when: not starship.stat.exists

        - name: Run Starship installer
          ansible.builtin.script:
            cmd: /tmp/starship-installer.sh --yes
          become: true
          args:
            creates: /usr/local/bin/starship
            executable: /bin/sh
          when: not starship.stat.exists

        - name: Configure Oh-My-Zsh to use Startship
          ansible.builtin.lineinfile:
            path: '{{ ansible_env.HOME }}/.zshrc'
            line: eval "$(starship init zsh)"
            state: present

        - name: Configure Starship
          ansible.builtin.blockinfile:
            path: '{{ ansible_env.HOME }}/.config/starship.toml'
            create: true
            mode: '0664'
            marker: "# {mark} ANSIBLE MANAGED BLOCK FOR STARSHIP CONFIGURATION"
            block: |
              [username]
              show_always = true

              [java]
              style = 'red bold'

    - name: Installing Docker and Docker Compose
      tags: docker
      block:
        - name: Install Docker Key
          become: true
          ansible.builtin.apt_key:
            url: 'https://download.docker.com/linux/ubuntu/gpg'
            state: present
            keyring: /etc/apt/trusted.gpg.d/docker.gpg

        - name: Install Docker Repository
          become: true
          ansible.builtin.apt_repository:
            repo: 'deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable'
            state: present
            filename: docker-ce

        - name: Install Docker and Docker Compose
          become: true
          ansible.builtin.apt:
            name: docker-ce

        - name: Adding existing user to group Docker
          become: true
          ansible.builtin.user:
            name: '{{ ansible_user_id }}'
            groups: docker
            append: true

        - name: Install Docker and Docker-Compose Zsh Completion
          ansible.builtin.lineinfile:
            path: /home/{{ ansible_user_id }}/.zshrc
            regexp: '^plugins='
            line: 'plugins=(git docker docker-compose)'

    - name: Kubernetes Tasks
      tags: kubernetes
      block:
        - name: Installing Kind 0.26.0
          become: true
          ansible.builtin.uri:
            url: https://kind.sigs.k8s.io/dl/v0.26.0/kind-linux-amd64
            dest: /usr/local/bin/kind
            mode: 755
            creates: /usr/local/bin/kind

        - name: Installing Kubectl 1.32.0
          become: true
          ansible.builtin.get_url:
            url: 'https://dl.k8s.io/release/v1.32.0/bin/linux/amd64/kubectl'
            dest: /usr/local/bin/kubectl
            mode: 755

        - name: Downloading Kubectx and Kubens
          become: true
          ansible.builtin.git:
            repo: 'https://github.com/ahmetb/kubectx'
            dest: /opt/kubectx
            version: v0.9.5

        - name: Creating Symlink to kubectx and kubens
          become: true
          ansible.builtin.file:
            src: '/opt/kubectx/{{ item }}'
            dest: '/usr/local/bin/{{ item }}'
            state: link
          with_items:
            - kubectx
            - kubens

        - name: Creating ZSH Completion
          ansible.builtin.file:
            src: '/opt/kubectx/completion/_{{ item }}'
            dest: '/home/{{ ansible_user_id }}/.oh-my-zsh/completions/_{{ item }}'
            state: link
          with_items:
            - kubectx.zsh
            - kubens.zsh

    - name: Installing java tools
      tags: java
      block:
        - name: Verify if SDKMAN already installed
          ansible.builtin.stat:
            path: '{{ ansible_env.HOME }}/.sdkman'
          register: sdkman

        - name: Download SDKMAN installer script
          ansible.builtin.get_url:
            url: https://get.sdkman.io
            dest: /tmp/sdkman-installer.sh
            mode: '0644'
          when: sdkman.stat.isdir is not defined

        - name: Run SDKMAN installer script
          ansible.builtin.script: /tmp/sdkman-installer.sh
          args:
            executable: /bin/bash
            creates: '{{ ansible_env.HOME }}/.pyenv/'
          when: sdkman.stat.isdir is not defined

        - name: Installing SDKs
          register: sdk_install
          changed_when: '"is already installed." not in sdk_install.stdout'
          failed_when: >-
            sdk_install.rc != 0 and
            "is already installed." not in sdk_install.stdout
          ansible.builtin.shell: >-
            . {{ ansible_env.HOME }}/.sdkman/bin/sdkman-init.sh &&
            sdk install {{ item }}
          args:
            executable: /bin/bash
          loop:
            - java 8.0.432-tem
            - java 11.0.25-tem
            - java 17.0.13-tem
            - gradle 8.10.2
            - maven 3.8.5

        - name: Set default SDKs
          changed_when: false
          ansible.builtin.shell: >-
            . /home/{{ ansible_user_id }}/.sdkman/bin/sdkman-init.sh &&
            sdk default {{ item }}
          args:
            executable: /bin/bash
          loop:
            - java 17.0.13-tem
            - gradle 8.10.2
            - maven 3.8.5

    - name: Node Tasks
      tags: node
      block:
        - name: Install asdf
          ansible.builtin.git:
            repo: https://github.com/asdf-vm/asdf.git
            dest: '{{ ansible_env.HOME }}/.asdf'
            version: v0.15.0

        - name: Configuring asdf
          ansible.builtin.blockinfile:
            path: '{{ ansible_env.HOME }}/.zshrc'
            marker: "# {mark} ANSIBLE MANAGED BLOCK FOR ASDF"
            block: |
              . "$HOME/.asdf/asdf.sh"
              # append completions to fpath
              fpath=(${ASDF_DIR}/completions $fpath)

        - name: Install asdf plugin for NodeJS
          ansible.builtin.shell: |
            . {{ ansible_env.HOME }}/.asdf/asdf.sh
            asdf plugin add nodejs https://github.com/asdf-vm/asdf-nodejs.git
          args:
            executable: /bin/bash
            creates: '{{ ansible_env.HOME }}/.asdf/plugins/nodejs'

        - name: Install NodeJS versions
          register: asdf_install
          changed_when: '"is already installed" not in asdf_install.stdout'
          failed_when: >-
            asdf_install.rc != 0 and
            "is already installed" not in asdf_install.stdout
          ansible.builtin.shell: |
            . {{ ansible_env.HOME }}/.asdf/asdf.sh
            asdf install nodejs {{ item }}
          args:
            executable: /bin/bash
          loop:
            - 22.13.0
            - 20.18.1
            - 14.21.3

        - name: Configure NodeJS global version
          changed_when: false
          ansible.builtin.shell: |
            . {{ ansible_env.HOME }}/.asdf/asdf.sh
            asdf global nodejs 22.13.0
          args:
            executable: /bin/bash

    - name: Python Tasks
      tags: python
      block:
        - name: Download Pyenv installer script
          ansible.builtin.get_url:
            url: https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer
            dest: /tmp/pyenv-installer.sh
            mode: '0644'

        - name: Run Pyenv installer script
          ansible.builtin.script: /tmp/pyenv-installer.sh
          args:
            executable: /bin/bash
            creates: '{{ ansible_env.HOME }}/.pyenv/'

        - name: Configurando pyenv no .zshrc
          ansible.builtin.blockinfile:
            path: '{{ ansible_env.HOME }}/.zshrc'
            state: present
            marker: "# {mark} ANSIBLE MANAGED BLOCK FOR PYENV"
            block: |
              export PYENV_ROOT="$HOME/.pyenv"
              command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
              eval "$(pyenv init -)"

        - name: Install Python 3.10.4
          ansible.builtin.command:
            cmd: '{{ ansible_env.HOME }}/.pyenv/bin/pyenv install 3.10.4'
            creates: '{{ ansible_env.HOME }}/.pyenv/versions/3.10.4/'

    - name: DBeaver tasks
      tags: dbeaver
      block:
        - name: Gather the package facts
          ansible.builtin.package_facts:
            manager: auto

        - name: Downloading DBeaver deb file
          ansible.builtin.get_url:
            url: https://dbeaver.io/files/dbeaver-ce_latest_amd64.deb
            dest: /tmp/dbeaver-ce_latest_amd64.deb
            mode: '0664'
          when: "'dbeaver' in ansible_facts.packages"
          notify:
            - Install DBeaver deb file

  handlers:
    - name: Install DBeaver deb file
      become: true
      ansible.builtin.apt:
        deb: /tmp/dbeaver-ce_latest_amd64.deb
